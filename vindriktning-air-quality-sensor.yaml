globals:
   - id: booted
     type: bool
     restore_value: no
     initial_value: 'false'
   - id: led_brightness
     type: float
     restore_value: no
     initial_value: '0'

esphome:
  name: vindriktning-air-quality-sensor
  friendly_name: Vindriktning Air Quality Sensor
  on_boot:
    priority: -100.0
    then:
      - light.turn_off: indicator_light_1
      - light.turn_off: indicator_light_2
      - light.turn_off: indicator_light_3

      #- delay: 15s
      
      - light.turn_on:
          id: indicator_light_3
          red: 0%
          green: 100%
          blue: 0%
      - delay: 1s
      - light.turn_off: indicator_light_3

      - light.turn_on:
          id: indicator_light_2
          red: 100%
          green: 50%
          blue: 0%
      - delay: 1s
      - light.turn_off: indicator_light_2

      - light.turn_on:
          id: indicator_light_1
          red: 100%
          green: 0%
          blue: 0%
      - delay: 1s
      - light.turn_off: indicator_light_1

      - light.turn_on:
          id: indicator_light_2
          red: 100%
          green: 50%
          blue: 0%
      - delay: 1s
      - light.turn_off: indicator_light_2

      - light.turn_on:
          id: indicator_light_3
          red: 0%
          green: 100%
          blue: 0%
      - delay: 1s
      - light.turn_off: indicator_light_3

      - globals.set:
          id: booted
          value: 'true'

esp8266:
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: ""

ota:
  password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

web_server:
  port: 80

light:
  - platform: neopixelbus
    id: indicator_lights
    type: GRB
    variant: WS2811
    pin: 3
    num_leds: 3
    default_transition_length: 0s
    internal: true

  - platform: partition
    id: indicator_light_1
    # name: "indicator_light_1"
    segments:
      - id: indicator_lights
        from: 2
        to: 2

  - platform: partition
    id: indicator_light_2
    # name: "indicator_light_2"
    segments:
      - id: indicator_lights
        from: 1
        to: 1

  - platform: partition
    id: indicator_light_3
    # name: "indicator_light_3"
    segments:
      - id: indicator_lights
        from: 0
        to: 0

  - platform: monochromatic
    name: "Indicator Lights"
    output: indicator_lights_controller
    gamma_correct: 1
    default_transition_length: 0s

output:
  - platform: template
    id: indicator_lights_controller
    type: float
    write_action:
      - lambda: !lambda |-
          id(indicator_light_1).turn_on().set_transition_length(0).set_brightness(state).perform();
          id(indicator_light_2).turn_on().set_transition_length(0).set_brightness(state).perform();
          id(indicator_light_3).turn_on().set_transition_length(0).set_brightness(state).perform();
          id(led_brightness) = state;

uart:
  rx_pin: D4
  baud_rate: 9600

i2c:
  sda: D2
  scl: D1

sensor:
  - platform: pm1006
    pm_2_5:
      name: "2.5Âµm"
      on_value:
          lambda: !lambda |-
            auto call = id(indicator_light_1).turn_on();
            call.set_brightness(id(led_brightness));
            if (x >= 90) {
              call.set_rgb(1, 0, 0).perform();
            } else if (x >= 30) {
              call.set_rgb(1, 0.5, 0).perform();
            } else {
              call.set_rgb(0, 1, 0).perform();
            }
            call.perform();

  - platform: ccs811
    eco2:
      name: "eCO2"
      on_value:
          lambda: !lambda |-
            auto call = id(indicator_light_2).turn_on();
            call.set_brightness(id(led_brightness));
            if (x >= 1500) {
              call.set_rgb(1, 0, 0).perform();
            } else if (x >= 1000) {
              call.set_rgb(1, 0.5, 0).perform();
            } else if (x >= 800) {
              call.set_rgb(1, 1, 0).perform();
            } else {
              call.set_rgb(0, 1, 0).perform();
            }
            call.perform();

    tvoc:
        name: "VOC"
        filters:
          - lambda: if (x > 1187) return {}; else return x;
        on_value:
          lambda: !lambda |-
            auto call = id(indicator_light_3).turn_on();
            call.set_brightness(id(led_brightness));
            if (x >= 1431) {
              call.set_rgb(1, 0, 0).perform();
            } else if (x >= 661) {
              call.set_rgb(1, 0.5, 0).perform();
            } else if (x >= 221) {
              call.set_rgb(1, 1, 0).perform();
            } else {
              call.set_rgb(0, 1, 0).perform();
            }
            call.perform();
    update_interval: 5s
    baseline: 0x247F
